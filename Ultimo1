import streamlit as st
import datetime

# Configura√ß√£o inicial do Streamlit
st.set_page_config(page_title="Sistema de Relat√≥rio", page_icon="üìä", layout="wide")

st.markdown("""
    <style>
    :root {
        --primary-color: #5A5D9D;
        --secondary-color: #8C8FA3;
        --background-color: #F9FAFB;
        --text-color: #333333;
        --border-color: #E0E0E0;
        --selected-color: #3B3F75;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        margin: 0;
    }

""", unsafe_allow_html=True)

# Inicializar informa√ß√µes de estado
if "dados_diafragma" not in st.session_state:
    st.session_state.dados_diafragma = {
        "Espessura Inspirat√≥ria (mm)": 0.0,
        "Espessura Expirat√≥ria (mm)": 0.0,
        "Espessura Inspirat√≥ria em CPT (mm)": 0.0,
        "Espessura Expirat√≥ria em CPT (mm)": 0.0,
        "Mobilidade Diafragm√°tica em VT (mm)": 0.0,
        "Mobilidade Diafragm√°tica em CPT (mm)": 0.0,
        "Fra√ß√£o de Espessamento Diafragm√°tico (DTF)": "",
        "Taxa de Espessamento Diafragm√°tico": "",
        "Slope Diafragm√°tico": 0.0,
        "Frequ√™ncia Respirat√≥ria (irpm)": "",
        "D-IRRS": ""
    }

if "dados_pulmao" not in st.session_state:
    st.session_state.dados_pulmao = {
        "√Åreas Pulmonares": [0] * 12,
        "LUS Score Total": 0,
        "Avalia√ß√£o Pleural": "",
        "Observa√ß√µes": ""
    }

if "dados_paciente" not in st.session_state:
    st.session_state.dados_paciente = {
        "Nome": "",
        "Data de Nascimento": None,
        "Sexo": "",
        "Diagn√≥stico M√©dico": "",
        "Diagn√≥stico Fisioterap√™utico": "",
        "Mais Informa√ß√µes": ""
    }

if "dados_musculo_periferico" not in st.session_state:
    st.session_state.dados_musculo_periferico = {
        "Ecointensidade": 0.0,
        "√Çngulo de Pena√ß√£o (graus)": 0.0,
        "√Årea de Sec√ß√£o Transversa (cm¬≤)": 0.0,
        "Espessura em Repouso (mm)": 0.0,
        "Espessura Durante Contra√ß√£o (mm)": 0.0,
        "Fra√ß√£o de Espessamento Muscular (MTF)": "",
        "Observa√ß√µes": ""
    }

# Menu principal e sub-abas
menu_principal = st.sidebar.radio("Menu Principal",
                                  ["Dados do Paciente", "An√°lise Ultrassonografia Cinesiol√≥gica", "Relat√≥rio"])
sub_aba_ativa = None

if menu_principal == "An√°lise Ultrassonografia Cinesiol√≥gica":
    # Sub-Abas dentro do menu "An√°lise Ultrassonografia Cinesiol√≥gica"
    sub_abas = ["Diafragma", "Pleuro-pulmonar", "M√∫sculo perif√©rico",]
    sub_aba_ativa = st.sidebar.radio("Selecione a regi√£o de avalia√ß√£o", sub_abas)

    # Sub-aba "Diafragma"
    if sub_aba_ativa == "Diafragma":
        st.title("Diafragma")
        # (L√≥gica j√° existente para a sub-aba Diafragma)

    # Sub-aba "Pleuro-pulmonar"
    if sub_aba_ativa == "Pleuro-pulmonar":
        st.title("Pleuro-pulmonar")
        # (L√≥gica j√° existente para a sub-aba Pleuro-pulmonar)

    # Sub-aba "M√∫sculo Perif√©rico"
    if sub_aba_ativa == "M√∫sculo perif√©rico":
        st.write("### An√°lise do M√∫sculo Perif√©rico")

        # CSS para reduzir o tamanho dos inputs
        st.markdown("""
            <style>
            div[data-testid="stTextInput"] > div, div[data-testid="stNumberInput"] > div {
                max-width: 150px; /* Define o tamanho m√°ximo para inputs */
            }
            </style>
        """, unsafe_allow_html=True)

        # Inicializar a lista de m√∫sculos no estado da sess√£o
        if "musculos" not in st.session_state:
            st.session_state.musculos = [
                {"Nome do M√∫sculo": "", "Ecointensidade": 0.0, "√Çngulo de Pena√ß√£o (graus)": 0.0,
                 "√Årea de Sec√ß√£o Transversa (cm¬≤)": 0.0, "Espessura em Repouso (mm)": 0.0,
                 "Espessura Durante Contra√ß√£o (mm)": 0.0, "Fra√ß√£o de Espessamento Muscular (MTF)": "",
                 "Observa√ß√µes": ""}]


        # Fun√ß√£o para adicionar um novo m√∫sculo
        def adicionar_musculo():
            st.session_state.musculos.append(
                {"Nome do M√∫sculo": "", "Ecointensidade": 0.0, "√Çngulo de Pena√ß√£o (graus)": 0.0,
                 "√Årea de Sec√ß√£o Transversa (cm¬≤)": 0.0, "Espessura em Repouso (mm)": 0.0,
                 "Espessura Durante Contra√ß√£o (mm)": 0.0, "Fra√ß√£o de Espessamento Muscular (MTF)": "",
                 "Observa√ß√µes": ""})


        # Fun√ß√£o para remover o √∫ltimo m√∫sculo
        def remover_musculo():
            if len(st.session_state.musculos) > 1:
                st.session_state.musculos.pop()


        # Bot√µes para adicionar e remover m√∫sculos
        col1, col2 = st.columns([1, 1])
        with col1:
            st.button("Adicionar M√∫sculo", on_click=adicionar_musculo)
        with col2:
            st.button("Remover M√∫sculo", on_click=remover_musculo)

        # Renderizar os inputs para cada m√∫sculo
        for i, musculo in enumerate(st.session_state.musculos):
            st.markdown(f"#### M√∫sculo {i + 1}")
            musculo["Nome do M√∫sculo"] = st.text_input(
                f"Nome {i + 1}", value=musculo["Nome do M√∫sculo"], key=f"nome_musculo_{i}"
            )

            # Alinhar os campos horizontalmente com nomes mais curtos
            col1, col2, col3, col4, col5, col6 = st.columns(6)
            with col1:
                musculo["Ecointensidade"] = st.number_input(
                    f"Ecointensidade ou ecogenicidade. {i + 1}", min_value=0.0, value=musculo["Ecointensidade"],
                    format="%.1f", step=0.1, key=f"ecointensidade_{i}"  # Adicionado step
                )
            with col2:
                musculo["√Çngulo de Pena√ß√£o (graus)"] = st.number_input(
                    f"√Çng. de pena√ß√£o (graus). {i + 1}", min_value=0.0, value=musculo["√Çngulo de Pena√ß√£o (graus)"],
                    format="%.1f", step=0.1, key=f"angulo_penacao_{i}"  # Adicionado step
                )
            with col3:
                musculo["√Årea de Sec√ß√£o Transversa (cm¬≤)"] = st.number_input(
                    f"√Årea sec√ß√£o trans.(cm¬≤) {i + 1}", min_value=0.0, value=musculo["√Årea de Sec√ß√£o Transversa (cm¬≤)"],
                    format="%.1f", step=0.1, key=f"area_sec_transv_{i}"  # Adicionado step
                )
            with col4:
                musculo["Espessura em Repouso (mm)"] = st.number_input(
                    f"Espessura em Repouso {i + 1}", min_value=0.0, value=musculo["Espessura em Repouso (mm)"],
                    format="%.1f", step=0.1, key=f"espessura_repouso_{i}"  # Adicionado step
                )
            with col5:
                musculo["Espessura Durante Contra√ß√£o (mm)"] = st.number_input(
                    f"Espessura na Contra√ß√£o. {i + 1}", min_value=0.0,
                    value=musculo["Espessura Durante Contra√ß√£o (mm)"],
                    format="%.1f", step=0.1, key=f"espessura_contracao_{i}"  # Adicionado step
                )
            with col6:
                # C√°lculo da Fra√ß√£o de Espessamento Muscular (MTF)
                if (
                        musculo["Espessura em Repouso (mm)"] > 0
                        and musculo["Espessura Durante Contra√ß√£o (mm)"] > 0
                ):
                    mtf = (
                                  (
                                          musculo["Espessura Durante Contra√ß√£o (mm)"]
                                          - musculo["Espessura em Repouso (mm)"]
                                  )
                                  / musculo["Espessura em Repouso (mm)"]
                          ) * 100
                    musculo["Fra√ß√£o de Espessamento Muscular (MTF)"] = f"{mtf:.1f}%"
                else:
                    musculo["Fra√ß√£o de Espessamento Muscular (MTF)"] = ""

                st.text_input(
                    f"Fra√ß√£o de espes. muscular (%) {i + 1}",
                    value=musculo["Fra√ß√£o de Espessamento Muscular (MTF)"],
                    key=f"mtf_{i}",
                    disabled=True,
                )

            # Observa√ß√µes
            musculo["Observa√ß√µes"] = st.text_area(
                f"Observa√ß√µes {i + 1}", value=musculo["Observa√ß√µes"], key=f"observacoes_{i}"
            )

            st.markdown("---")

# Aba "Dados do Paciente"
if menu_principal == "Dados do Paciente":
    st.title("Dados do Paciente")

    # Nome do Paciente
    st.session_state.dados_paciente["Nome"] = st.text_input("Nome:", value=st.session_state.dados_paciente["Nome"])

    # Alinhar Data de Nascimento, Sexo e Idade em uma linha com ajuste de propor√ß√£o
    col1, col2, col3 = st.columns([2, 2, 1])  # Ajuste proporcional: mais espa√ßo para Sexo e Data de Nascimento

    with col1:
        # Campo Data de Nascimento
        data_nascimento = st.text_input("Data de Nascimento:", value="", key="data_nasc")
        if data_nascimento:
            try:
                nascimento = datetime.datetime.strptime(data_nascimento, "%d/%m/%Y").date()
                if nascimento < datetime.date(1900, 1, 1) or nascimento > datetime.date.today():
                    st.warning("Por favor, insira uma data entre 01/01/1900 e a data atual.")
                    nascimento = None
                else:
                    st.session_state.dados_paciente["Data de Nascimento"] = nascimento
            except ValueError:
                st.warning("Por favor, insira a data no formato correto: dd/mm/aaaa.")
                nascimento = None
        else:
            nascimento = None

    with col2:
        # Campo Sexo com mais espa√ßo
        st.session_state.dados_paciente["Sexo"] = st.selectbox(
            "Sexo:", ["", "Masculino", "Feminino"],
            index=["", "Masculino", "Feminino"].index(st.session_state.dados_paciente["Sexo"])
        )

    with col3:
        # Campo Idade (calculado automaticamente com base na Data de Nascimento)
        if nascimento:
            hoje = datetime.date.today()
            idade = hoje.year - nascimento.year - ((hoje.month, hoje.day) < (nascimento.month, nascimento.day))
        else:
            idade = "--"
        st.text_input("Idade:", value=str(idade))  # Campo normal para manter a tonalidade

    # Diagn√≥stico M√©dico
    st.session_state.dados_paciente["Diagn√≥stico M√©dico"] = st.text_area(
        "Diagn√≥stico M√©dico:", value=st.session_state.dados_paciente["Diagn√≥stico M√©dico"]
    )

    # Diagn√≥stico Fisioterap√™utico
    st.session_state.dados_paciente["Diagn√≥stico Fisioterap√™utico"] = st.text_area(
        "Diagn√≥stico Fisioterap√™utico:", value=st.session_state.dados_paciente["Diagn√≥stico Fisioterap√™utico"]
    )

    # Mais Informa√ß√µes
    st.session_state.dados_paciente["Mais Informa√ß√µes"] = st.text_area(
        "Mais Informa√ß√µes:", value=st.session_state.dados_paciente["Mais Informa√ß√µes"]
    )

# Sub-aba "Diafragma"
if sub_aba_ativa == "Diafragma":
    st.write("### Volume Corrente (VT)")

    # CSS para reduzir o tamanho dos inputs pela metade
    st.markdown("""
        <style>
        div[data-testid="stTextInput"] > div, div[data-testid="stNumberInput"] > div {
            max-width: 150px; /* Define o tamanho m√°ximo para inputs */
        }
        </style>
    """, unsafe_allow_html=True)

    # Alinhamento horizontal dos inputs
    col1, col2, col3 = st.columns(3)
    with col1:
        st.session_state.dados_diafragma["Espessura Inspirat√≥ria (mm)"] = st.number_input(
            "Espessura Inspirat√≥ria (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Espessura Inspirat√≥ria (mm)"],
            format="%.2f", key="espessura_inspiratoria_vt"
        )
    with col2:
        st.session_state.dados_diafragma["Espessura Expirat√≥ria (mm)"] = st.number_input(
            "Espessura Expirat√≥ria (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Espessura Expirat√≥ria (mm)"],
            format="%.2f", key="espessura_expiratoria_vt"
        )
    with col3:
        st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em VT (mm)"] = st.number_input(
            "Mobilidade em VT (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em VT (mm)"],
            format="%.2f", key="mobilidade_vt"
        )

    st.write("### Valor da Fra√ß√£o de Espessamento Diafragm√°tico (DTF)")
    if st.session_state.dados_diafragma["Espessura Expirat√≥ria (mm)"] > 0:
        dtf = ((st.session_state.dados_diafragma["Espessura Inspirat√≥ria (mm)"] -
                st.session_state.dados_diafragma["Espessura Expirat√≥ria (mm)"]) /
               st.session_state.dados_diafragma["Espessura Expirat√≥ria (mm)"]) * 100
        st.session_state.dados_diafragma["Fra√ß√£o de Espessamento Diafragm√°tico (DTF)"] = f"{dtf:.2f}%"
    else:
        st.session_state.dados_diafragma["Fra√ß√£o de Espessamento Diafragm√°tico (DTF)"] = ""

    st.text_input(
        "DTF (%)", value=st.session_state.dados_diafragma["Fra√ß√£o de Espessamento Diafragm√°tico (DTF)"],
        key="fra√ß√£o_dtf", disabled=not bool(st.session_state.dados_diafragma["Fra√ß√£o de Espessamento Diafragm√°tico (DTF)"])
    )

    st.write("### Capacidade Pulmonar Total (CPT)")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.session_state.dados_diafragma["Espessura Inspirat√≥ria em CPT (mm)"] = st.number_input(
            "Espessura Inspirat√≥ria CPT (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Espessura Inspirat√≥ria em CPT (mm)"],
            format="%.2f", key="espessura_inspiratoria_cpt"
        )
    with col2:
        st.session_state.dados_diafragma["Espessura Expirat√≥ria em CPT (mm)"] = st.number_input(
            "Espessura Expirat√≥ria CPT (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Espessura Expirat√≥ria em CPT (mm)"],
            format="%.2f", key="espessura_expiratoria_cpt"
        )
    with col3:
        st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em CPT (mm)"] = st.number_input(
            "Mobilidade em CPT (mm)", min_value=0.0, value=st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em CPT (mm)"],
            format="%.2f", key="mobilidade_cpt"
        )

    st.write("### Taxa de Espessamento Diafragm√°tico")
    if st.session_state.dados_diafragma["Espessura Expirat√≥ria em CPT (mm)"] > 0:
        taxa = st.session_state.dados_diafragma["Espessura Inspirat√≥ria em CPT (mm)"] / \
               st.session_state.dados_diafragma["Espessura Expirat√≥ria em CPT (mm)"]
        st.session_state.dados_diafragma["Taxa de Espessamento Diafragm√°tico"] = f"{taxa:.2f}"
    else:
        st.session_state.dados_diafragma["Taxa de Espessamento Diafragm√°tico"] = ""

    st.text_input(
        "Taxa Espessamento", value=st.session_state.dados_diafragma["Taxa de Espessamento Diafragm√°tico"],
        key="taxa_espessamento", disabled=not bool(st.session_state.dados_diafragma["Taxa de Espessamento Diafragm√°tico"])
    )

    st.write("### Slope Diafragm√°tico")
    st.session_state.dados_diafragma["Slope Diafragm√°tico"] = st.number_input(
        "Slope Diafragm√°tico", min_value=0.0, value=st.session_state.dados_diafragma["Slope Diafragm√°tico"],
        format="%.2f", key="slope_diafragmatico"
    )

    st.write("### D-IRRS")
    freq_resp = st.text_input("Freq Resp (irpm)", value="", key="freq_respiratoria")
    if freq_resp.isdigit():
        freq_resp = float(freq_resp)
        st.session_state.dados_diafragma["Frequ√™ncia Respirat√≥ria (irpm)"] = freq_resp
    else:
        freq_resp = None
        st.session_state.dados_diafragma["Frequ√™ncia Respirat√≥ria (irpm)"] = ""

    if freq_resp and st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em VT (mm)"] > 0:
        d_irrs = freq_resp / st.session_state.dados_diafragma["Mobilidade Diafragm√°tica em VT (mm)"]
        st.session_state.dados_diafragma["D-IRRS"] = f"{d_irrs:.2f} irpm/mm"
    else:
        st.session_state.dados_diafragma["D-IRRS"] = ""

    st.text_input(
        "Resultado D-IRRS", value=st.session_state.dados_diafragma["D-IRRS"],
        key="resultado_dirrs", disabled=not bool(st.session_state.dados_diafragma["D-IRRS"])
    )


# Sub-aba "Pleuro-pulmonar"
if sub_aba_ativa == "Pleuro-pulmonar":
    # Adicionar CSS para reduzir o tamanho do campo de LUS Score Total
    st.markdown(
        """
        <style>
        .lus-score-total {
            font-size: 16px !important;
            width: 150px !important;
            text-align: center !important;
            display: inline-block;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.write("Insira os valores das √°reas para calcular o LUS Score (0 a 3 para cada √°rea):")

    # Inicializar valores vazios se necess√°rio
    if "√Åreas Pulmonares" not in st.session_state.dados_pulmao:
        st.session_state.dados_pulmao["√Åreas Pulmonares"] = ["" for _ in range(12)]

    # √Åreas do Hemit√≥rax Direito (1 a 6) em uma linha horizontal
    st.write("### √Åreas do Hemit√≥rax Direito (1 a 6)")
    cols_hd = st.columns(6)  # Criar 6 colunas para alinhamento horizontal
    for i in range(6):
        with cols_hd[i]:
            st.session_state.dados_pulmao["√Åreas Pulmonares"][i] = st.selectbox(
                f"√Årea {i + 1} (HD)", ["", 0, 1, 2, 3],
                index=0,  # Sempre inicializa com a primeira op√ß√£o (vazio)
                key=f"pulmao_hd_{i}"
            )

    # √Åreas do Hemit√≥rax Esquerdo (1 a 6) em uma linha horizontal
    st.write("### √Åreas do Hemit√≥rax Esquerdo (1 a 6)")
    cols_he = st.columns(6)  # Criar 6 colunas para alinhamento horizontal
    for i in range(6, 12):
        with cols_he[i - 6]:
            st.session_state.dados_pulmao["√Åreas Pulmonares"][i] = st.selectbox(
                f"√Årea {i - 5} (HE)", ["", 0, 1, 2, 3],
                index=0,  # Sempre inicializa com a primeira op√ß√£o (vazio)
                key=f"pulmao_he_{i}"
            )

    # C√°lculo do LUS Score Total
    st.session_state.dados_pulmao["LUS Score Total"] = sum(
        int(area) if area != "" else 0 for area in st.session_state.dados_pulmao["√Åreas Pulmonares"]
    )
    st.write("### LUS Score Total")
    st.markdown(
        f"<div class='lus-score-total'>{st.session_state.dados_pulmao['LUS Score Total']}</div>",
        unsafe_allow_html=True
    )

    # Avalia√ß√£o Pleural
    st.write("### Avalia√ß√£o Pleural")
    st.session_state.dados_pulmao["Avalia√ß√£o Pleural"] = st.selectbox(
        "Selecione o tipo de avalia√ß√£o:",
        ["", "Com deslizamento", "Sem deslizamento", "Com perda de continuidade"],
        index=0,  # Sempre inicializa com a primeira op√ß√£o (vazio)
        key="avaliacao_pleural"
    )

    # Observa√ß√µes
    st.session_state.dados_pulmao["Observa√ß√µes"] = st.text_area(
        "Observa√ß√µes:", value=st.session_state.dados_pulmao["Observa√ß√µes"]
    )




from fpdf import FPDF
import streamlit as st

# Aba "Relat√≥rio"
if menu_principal == "Relat√≥rio":
    st.title("Relat√≥rio")

    # Cabe√ßalho: Dados do Paciente em duas colunas
    if any(v not in [0, "", None] for v in st.session_state.dados_paciente.values()):
        st.write("### Informa√ß√µes do Paciente")
        col1, col2 = st.columns(2)

        with col1:
            if st.session_state.dados_paciente["Nome"]:
                st.write(f"**Nome:** {st.session_state.dados_paciente['Nome']}")
            if st.session_state.dados_paciente["Data de Nascimento"]:
                st.write(f"**Data de Nascimento:** {st.session_state.dados_paciente['Data de Nascimento']}")
            if st.session_state.dados_paciente["Sexo"]:
                st.write(f"**Sexo:** {st.session_state.dados_paciente['Sexo']}")

        with col2:
            if st.session_state.dados_paciente["Diagn√≥stico M√©dico"]:
                st.write(f"**Diagn√≥stico M√©dico:** {st.session_state.dados_paciente['Diagn√≥stico M√©dico']}")
            if st.session_state.dados_paciente["Diagn√≥stico Fisioterap√™utico"]:
                st.write(f"**Diagn√≥stico Fisioterap√™utico:** {st.session_state.dados_paciente['Diagn√≥stico Fisioterap√™utico']}")
            if st.session_state.dados_paciente["Mais Informa√ß√µes"]:
                st.write(f"**Mais Informa√ß√µes:** {st.session_state.dados_paciente['Mais Informa√ß√µes']}")

        st.markdown("---")

    # Avalia√ß√£o Diafragm√°tica
    if any(v not in [0, "", None] for v in st.session_state.dados_diafragma.values()):
        st.subheader("Avalia√ß√£o Diafragm√°tica")
        col1, col2 = st.columns(2)
        for i, (k, v) in enumerate(st.session_state.dados_diafragma.items()):
            if v not in [0, "", None]:
                if i % 2 == 0:
                    with col1:
                        st.write(f"- **{k}:** {v}")
                else:
                    with col2:
                        st.write(f"- **{k}:** {v}")

    # Avalia√ß√£o Pleuro-pulmonar
    campos_preenchidos_pulmao = (
        any(area != 0 for area in st.session_state.dados_pulmao["√Åreas Pulmonares"]) or
        st.session_state.dados_pulmao["LUS Score Total"] != 0 or
        st.session_state.dados_pulmao["Avalia√ß√£o Pleural"] not in ["", None] or
        st.session_state.dados_pulmao["Observa√ß√µes"] not in ["", None]
    )
    if campos_preenchidos_pulmao:
        st.subheader("Avalia√ß√£o Pleuro-pulmonar")
        for k, v in st.session_state.dados_pulmao.items():
            if isinstance(v, list):
                if any(v):
                    st.write(f"- **{k}:** {v}")
            elif v not in [0, "", None]:
                st.write(f"- **{k}:** {v}")

    # Avalia√ß√£o M√∫sculo Perif√©rico
    if "musculos" in st.session_state and len(st.session_state.musculos) > 0 and any(
        any(v not in [0, ""] for v in musculo.values()) for musculo in st.session_state.musculos
    ):
        st.subheader("Resultados do M√∫sculo Perif√©rico")
        for i, musculo in enumerate(st.session_state.musculos):
            if any(v not in [0, ""] for v in musculo.values()):
                st.markdown(f"**M√∫sculo {i + 1}:**")
                for key, value in musculo.items():
                    if key != "Observa√ß√µes" and value not in [0, ""]:
                        st.write(f"- **{key}:** {value}")
                    if musculo["Observa√ß√µes"]:
                        st.write(f"- **Observa√ß√µes:** {musculo['Observa√ß√µes']}")


# Fun√ß√£o para criar o PDF
    def gerar_pdf():
        pdf = FPDF()
        pdf.add_page()

        pdf.set_font("Arial", style="B", size=16)
        pdf.cell(200, 10, txt="Relat√≥rio do Paciente", ln=True, align="C")
        pdf.ln(10)

        pdf.set_font("Arial", style="B", size=14)
        if any(v not in [0, "", None] for v in st.session_state.dados_paciente.values()):
            pdf.cell(200, 10, txt="Informa√ß√µes do Paciente:", ln=True, align="L")
            pdf.set_font("Arial", size=10)
            for k, v in st.session_state.dados_paciente.items():
                if v not in [0, "", None]:
                    pdf.cell(200, 10, txt=f"{k}: {v}", ln=True)

        if any(v not in [0, "", None] for v in st.session_state.dados_diafragma.values()):
            pdf.ln(5)
            pdf.set_font("Arial", style="B", size=14)
            pdf.cell(200, 10, txt="Avalia√ß√£o Diafragm√°tica:", ln=True, align="L")
            pdf.set_font("Arial", size=10)
            for k, v in st.session_state.dados_diafragma.items():
                if v not in [0, "", None]:
                    pdf.cell(200, 10, txt=f"{k}: {v}", ln=True)

        if campos_preenchidos_pulmao:
            pdf.ln(5)
            pdf.set_font("Arial", style="B", size=14)
            pdf.cell(200, 10, txt="Avalia√ß√£o Pleuro-pulmonar:", ln=True, align="L")
            pdf.set_font("Arial", size=10)
            for k, v in st.session_state.dados_pulmao.items():
                if isinstance(v, list):
                    if any(v):
                        pdf.cell(200, 10, txt=f"{k}: {v}", ln=True)
                elif v not in [0, "", None]:
                    pdf.cell(200, 10, txt=f"{k}: {v}", ln=True)

        if "musculos" in st.session_state and len(st.session_state.musculos) > 0 and any(
            any(v not in [0, ""] for v in musculo.values()) for musculo in st.session_state.musculos
        ):
            pdf.ln(5)
            pdf.set_font("Arial", style="B", size=14)
            pdf.cell(200, 10, txt="Avalia√ß√£o M√∫sculo Perif√©rico:", ln=True, align="L")
            pdf.set_font("Arial", size=10)
            for i, musculo in enumerate(st.session_state.musculos):
                if any(v not in [0, ""] for v in musculo.values()):
                    pdf.cell(200, 10, txt=f"M√∫sculo {i + 1}:", ln=True)
                    for key, value in musculo.items():
                        if key != "Observa√ß√µes" and value not in [0, ""]:
                            pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)
                        if musculo["Observa√ß√µes"]:
                            pdf.cell(200, 10, txt=f"Observa√ß√µes: {musculo['Observa√ß√µes']}", ln=True)

        return pdf.output(dest="S").encode("latin1")

    pdf_data = gerar_pdf()
    st.download_button(
        label="Salvar e Baixar PDF",
        data=pdf_data,
        file_name="relatorio_paciente.pdf",
        mime="application/pdf"
    )



